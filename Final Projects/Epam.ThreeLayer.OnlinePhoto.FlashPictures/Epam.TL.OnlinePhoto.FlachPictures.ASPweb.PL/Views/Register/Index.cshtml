@using Epam.TL.OnlinePhoto.FlashPictures.Dependencies;
@using Epam.TL.OnlinePhoto.FlashPictures.Entites;
@using Epam.TL.OnlinePhoto.FlachPictures.ASPweb.PL.Models;
@using NLog;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    Page.Title = "Страница регистрации";
    Logger logger = LogManager.GetCurrentClassLogger();
    logger.Info("User at Register Page");
    PasswordHasher hasher = new PasswordHasher();
    SearchUserAuthData userFoundState = new SearchUserAuthData();
    string login = Request["login"];
    string email = Request["e-mail"];
    try
    {
        if (IsPost)
        {
            userFoundState.LoginStatus(false);
            userFoundState.EmailStatus(false);
            if (login == DependencyResolver.Instance.UserLogic.CheckUserAuthData(login, email)[0])
            {

                userFoundState.LoginStatus(true);
            }
            else if (email == DependencyResolver.Instance.UserLogic.CheckUserAuthData(login, email)[1])
            {
                userFoundState.EmailStatus(true);
            }
            else
            {
                string password = Request["password"];
                User user = new User();
                DependencyResolver.Instance.UserLogic.Add(user);
                //Response.Redirect("~/Pages/LogIn", false);
            }
        }
    }
    catch (Exception ex)
    {
        logger.Error(ex, "This exception came from register page.");
    }
}

@{
    <link href="~/Content/mystyles/Register.css" type="text/css" rel="stylesheet" />
}

@if (!User.Identity.IsAuthenticated)
{
    <section class="reg-body">
        <h1 id="Registration">
            Регистрация
        </h1>
        <section id="Pryam">
            <section id="Data">
                <form action="javascript:void(0);" method="POST">
                    <fieldset class="clearfix">
                        <span class="service-symbol"><i class="fa fa-id-card-o" aria-hidden="true"></i></span>
                        <input type="text" value="Электронная почта" onblur="if (this.value == '') this.value = 'Электронная почта'" onfocus=" if (this.value == 'Электронная почта') this.value = '@email'" required>
                        <span class="service-symbol"><i class="fa fa-user-circle" aria-hidden="true"></i></span>
                        <input type="text" value="Логин" onblur="if(this.value == '') this.value = 'Логин'" onfocus="if (this.value == 'Логин') this.value = '@login'" required>
                        <span class="service-symbol"><i class="fa fa-key" aria-hidden="true"></i></span>
                        <input type="password" value="Пароль" onblur="if(this.value == '') this.value = 'Пароль'" onfocus="if(this.value == 'Пароль') this.value = ''" required>
                        <p><input type="submit" value="Зарегистрироваться"></p>
                    </fieldset>
                </form>
                @if (IsPost && userFoundState.LoginIsFound)
                {
                    <div class="error-div">
                        Пользователь с таким логином уже существует!
                    </div>
                }
                @if (IsPost && userFoundState.EmailIsFound)
                {
                    <div class="error-div">
                        Пользователь с таким адресом электронной почты уже существует!
                    </div>
                }
            </section>
        </section>
    </section>
}
<script type="text/javascript">
    let form = document.getElementById('logForm');
    form.addEventListener("submit", (event) => {
        if (!checkValidity()) {
            event.preventDefault();
        }
    })
    function checkValidity() {
        const loginRegex = /^[^\s]{2,}_?[^\s]*$/g;
        const emailRegex = /^\w{2,}@@{1}\w{2,}.{1}[A-Za-z]{2,}$/g;
        const ageRegex = /^\d{1,2}$/g;
        const passwordRegex = /(\w{3,}[.,:!?]+)|([.,:!?]+\w{3,})/g;
        let errorBox = document.getElementById('errorBox');
        let loginInput = document.getElementById('login');
        let emailInput = document.getElementById('e-mail');
        let ageInput = document.getElementById('age');
        let password = document.getElementById('password');
        let confirmPassword = document.getElementById('confirmPassword');
        for (var i = 0; i < form.elements.length; i++) {
            form[i].classList.remove("error-border");
        }
        if (!loginRegex.test(loginInput.value.trim())) {
            loginInput.classList.add("error-border");
            showError(errorBox, "Имя не должно включать пробельных символов. Минимальная длина имени 2 символа. Вместо пробелов используйтие нижнее подчеркивание.");
            return false;
        } else if (!emailRegex.test(emailInput.value)) {
            emailInput.classList.add("error-border");
            showError(errorBox, "Вы указали неверный e-mail.");
            return false;
        } else if (!ageRegex.test(ageInput.value)) {
            ageInput.classList.add("error-border");
            showError(errorBox, "Вы указали неверный возраст, должен быть в пределах от 1 от 99.");
            return false;
        } else if (!passwordRegex.test(password.value)) {
            password.classList.add("error-border");
            showError(errorBox, "пароль должен содержать минимум 4 знака, при этом включать в себя специальные символы [.,:!?].");
            return false;
        } else if (confirmPassword.value !== password.value) {
            confirmPassword.classList.add("error-border");
            showError(errorBox, "Пароль введенный в поле подтверждения не совпадает с введенным ранее.");
            return false;
        } else {
            return true;
        }
    }
    function showError(elem, message) {
        elem.innerHTML = "";
        let errorDiv = document.createElement('div');
        elem.append(errorDiv);
        elem.className = "error-div";
        elem.innerHTML = message;
    }
</script>
